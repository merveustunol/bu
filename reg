{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPDSfuM0wG16x5wnWiuZVFo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "b79815c62aae49b8868fb41e9199a1d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ImageModel",
          "state": {
            "_view_name": "ImageView",
            "_dom_classes": [],
            "_model_name": "ImageModel",
            "format": "png",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "width": "",
            "_view_module_version": "1.5.0",
            "layout": "IPY_MODEL_b61b712f65f644aa82d9089fc4cdaf07",
            "height": "",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b61b712f65f644aa82d9089fc4cdaf07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/merveustunol/bu/blob/master/reg\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-YVR28O2oedY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "e3aa31f2-f156-49f6-db19-d81c076d6849"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "%matplotlib inline \n",
        "\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/merveustunol/reg/master/regggggg.csv')\n",
        "df.columns= ['Cycle Time(s)','Length(mm)','Welding Current (avg) (A)','Welding Voltage (avg) (V)','Welding Wire Speed (avg) (m/min)','Welding Gas Usage (l)','Electricity Usage (W)','Welding Robot Speed (m/s)','Heat Input (j/mm)']\n",
        "print(df.info())\n",
        "df.head()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2192 entries, 0 to 2191\n",
            "Data columns (total 9 columns):\n",
            " #   Column                            Non-Null Count  Dtype  \n",
            "---  ------                            --------------  -----  \n",
            " 0   Cycle Time(s)                     2192 non-null   float64\n",
            " 1   Length(mm)                        2192 non-null   int64  \n",
            " 2   Welding Current (avg) (A)         2192 non-null   float64\n",
            " 3   Welding Voltage (avg) (V)         2192 non-null   float64\n",
            " 4   Welding Wire Speed (avg) (m/min)  2192 non-null   float64\n",
            " 5   Welding Gas Usage (l)             2192 non-null   float64\n",
            " 6   Electricity Usage (W)             2192 non-null   float64\n",
            " 7   Welding Robot Speed (m/s)         2192 non-null   float64\n",
            " 8   Heat Input (j/mm)                 2192 non-null   float64\n",
            "dtypes: float64(8), int64(1)\n",
            "memory usage: 154.2 KB\n",
            "None\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cycle Time(s)</th>\n",
              "      <th>Length(mm)</th>\n",
              "      <th>Welding Current (avg) (A)</th>\n",
              "      <th>Welding Voltage (avg) (V)</th>\n",
              "      <th>Welding Wire Speed (avg) (m/min)</th>\n",
              "      <th>Welding Gas Usage (l)</th>\n",
              "      <th>Electricity Usage (W)</th>\n",
              "      <th>Welding Robot Speed (m/s)</th>\n",
              "      <th>Heat Input (j/mm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.28</td>\n",
              "      <td>21</td>\n",
              "      <td>88.99</td>\n",
              "      <td>10.20</td>\n",
              "      <td>3.59</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.34</td>\n",
              "      <td>49</td>\n",
              "      <td>81.00</td>\n",
              "      <td>10.20</td>\n",
              "      <td>2.96</td>\n",
              "      <td>0.11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.36</td>\n",
              "      <td>32</td>\n",
              "      <td>111.99</td>\n",
              "      <td>13.90</td>\n",
              "      <td>7.53</td>\n",
              "      <td>0.11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.56</td>\n",
              "      <td>32</td>\n",
              "      <td>97.49</td>\n",
              "      <td>11.75</td>\n",
              "      <td>4.81</td>\n",
              "      <td>0.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.58</td>\n",
              "      <td>21</td>\n",
              "      <td>102.49</td>\n",
              "      <td>11.90</td>\n",
              "      <td>4.78</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.01</td>\n",
              "      <td>232.31</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Cycle Time(s)  Length(mm)  ...  Welding Robot Speed (m/s)  Heat Input (j/mm)\n",
              "0           0.28          21  ...                       0.00               0.00\n",
              "1           0.34          49  ...                       0.00               0.00\n",
              "2           0.36          32  ...                       0.00               0.00\n",
              "3           0.56          32  ...                       0.00               0.00\n",
              "4           0.58          21  ...                       0.01             232.31\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tlS2QAS3_aeY",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bvZG2ER9uwod",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "3fbed77d-433a-4a4c-bf9f-aa65771d19a7"
      },
      "source": [
        "X = df.drop(['Cycle Time(s)'], axis=1)\n",
        "y = df['Cycle Time(s)']\n",
        "sns.distplot(y)\n",
        "plt.show()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rl5k6QxWvT2A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "dca5a76d-135f-422e-861b-f927fd744320"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import accuracy_score \n",
        "from sklearn.metrics import confusion_matrix as cm\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "d_tree1 = DecisionTreeRegressor(max_depth = 3, random_state=42)\n",
        "d_tree1.fit(X_train, y_train)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=3,\n",
              "                      max_features=None, max_leaf_nodes=None,\n",
              "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                      min_samples_leaf=1, min_samples_split=2,\n",
              "                      min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                      random_state=42, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5TFYK1bzvXVK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "6a1a0d92-7527-4ea7-b52a-736f98923746"
      },
      "source": [
        "redictions = d_tree1.predict(X_test)\n",
        "errors = abs(predictions - y_test)\n",
        "print('Mean Absolute Error:', round(np.mean(errors), 2), 'unit.')\n",
        "mape = 100 * (errors / y_test)\n",
        "accuracy = 100 - np.mean(mape)\n",
        "print('Accuracy:', round(accuracy, 3), '%.')"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 0.33 unit.\n",
            "Accuracy: 90.509 %.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4yThRbLIvbyR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503,
          "referenced_widgets": [
            "b79815c62aae49b8868fb41e9199a1d1",
            "b61b712f65f644aa82d9089fc4cdaf07"
          ]
        },
        "outputId": "94ca052a-c672-471f-e002-78c79b111d62"
      },
      "source": [
        "from ipywidgets import Image\n",
        "from io import StringIO\n",
        "import pydotplus\n",
        "from sklearn.tree import export_graphviz\n",
        "\n",
        "dot_data = StringIO()\n",
        "export_graphviz(d_tree1, feature_names = X.columns,\n",
        "               out_file = dot_data, filled = True)\n",
        "graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n",
        "Image(value = graph.create_png())"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b79815c62aae49b8868fb41e9199a1d1",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Image(value=b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x05F\\x00\\x00\\x01\\xf1\\x08\\x02\\x00\\x00\\x00.\\xa3\\xf1\\xe…"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "padmG7C8vhbe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 767
        },
        "outputId": "dc2668be-690f-4db1-f7ad-a579f58112b7"
      },
      "source": [
        "d_tree2 = DecisionTreeRegressor(max_depth = 8, random_state=42)\n",
        "d_tree2.fit(X_train, y_train)\n",
        "predictions = d_tree2.predict(X_test)\n",
        "\n",
        "errors = abs(predictions - y_test)\n",
        "print('Mean Absolute Error:', round(np.mean(errors), 2), 'unit.')\n",
        "mape = 100 * (errors / y_test)\n",
        "accuracy = 100 - np.mean(mape)\n",
        "print('Accuracy:', round(accuracy, 3), '%.')\n",
        "\n",
        "plt.figure(figsize=(16, 9))\n",
        "\n",
        "ranking = d_tree2.feature_importances_\n",
        "features = np.argsort(ranking)[::-1][:10]\n",
        "columns = X.columns\n",
        "\n",
        "plt.title(\"Feature importances based on Decision Tree Regressor\", y = 1.03, size = 18)\n",
        "plt.bar(range(len(features)), ranking[features], color=\"lime\", align=\"center\")\n",
        "plt.xticks(range(len(features)), columns[features], rotation=80)\n",
        "plt.show()"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 0.12 unit.\n",
            "Accuracy: 96.947 %.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}